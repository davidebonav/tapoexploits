import pyshark
import json
from base64 import b64decode

requests = []
responses = []

def print_blocks(p1, p2, n):
    print(f"\t\033[91mCryptotext1:\033[0m {p1}\n\t\033[91mCryptotext2:\033[0m {p2}\n\033[91mAre equals on the first {n//16} blocks\033[0m\n")

def compare(bytes_str1, bytes_str2):
    min_length = min(len(bytes_str1), len(bytes_str2))
    common_length = 0
    
    for i in range(min_length):
        if bytes_str1[i] == bytes_str2[i]:
            common_length += 1
        else:
            break
  
    return common_length

def read_pcap(file_path):
    display_filter = 'tcp.len > 0 and not tcp.analysis.retransmission'
    cap = pyshark.FileCapture(file_path, display_filter=display_filter)

    for packet in cap:
        try:
            tcp_layer = packet.tcp
            if hasattr(tcp_layer, 'payload'):
                payload = bytes.fromhex(tcp_layer.payload.replace(':', ''))
                
                if payload.startswith(b"POST"):
                    payload = payload.split(b"\r\n\r\n")[1]
                    payload = json.loads(payload)["params"]["request"]
                    payload = b64decode(payload)
                    requests.append(payload)
                    
                elif payload.startswith(b"{"):
                    payload = json.loads(payload)["result"]["response"]
                    payload = b64decode(payload)
                    responses.append(payload)
        
        except (AttributeError, ValueError, KeyError) as e:
            continue

def check(pkts):
    while len(pkts) > 0:
        pkt = pkts.pop(0)
        for tmp in pkts:
            n = compare(tmp, pkt)
            if n > 0:
                print_blocks(tmp, pkt, n)

if __name__ == "__main__":
    pcap_file = 'filename.pcapng'
    read_pcap(pcap_file)
    
    print(f"\033[1mREQUESTS\033[0m")
    check(requests)
    print("")
    
    print(f"\033[1mRESPONSES\033[0m")
    check(responses)
