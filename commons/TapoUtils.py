#!/usr/bin/env python3

import os
from requests import Session
from base64 import b64decode,b64encode

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5

class TapoUtils():
    def __init__ (self, deviceIpAddress, rsaPublicKey):
        self.ipAddress = deviceIpAddress
        self.session = Session()
        self.createKeyPair()
        self.appPublicKey = rsaPublicKey

    def createKeyPair(self):
        self.keys = RSA.generate(1024)
        self.privateKey = self.keys.exportKey("PEM")
        self.publicKey  = self.keys.publickey().exportKey("PEM")

    def rsa_decrypt(self, ciphertext):
        ciphertext = b64decode(ciphertext.encode("UTF-8"))
        rsaKey = self.privateKey

        cipher = PKCS1_v1_5.new(RSA.importKey(rsaKey))
        plaintext = cipher.decrypt(ciphertext, None)
        
        if plaintext is None:
            raise ValueError("Decryption failed!")

        return(plaintext)

    def rsa_encrypt(self, plaintext):
        rsaKey = RSA.importKey(self.appPublicKey)
        cipher = PKCS1_v1_5.new(rsaKey)
        ciphertext = b64encode(cipher.encrypt(plaintext))

        return ciphertext
    
    def get_key_and_cookie(self):
        URL = f"http://{self.ipAddress}/app"
        Payload = {
            "method":"handshake",
            "params":{
                "key": self.publicKey.decode("utf-8")
            },
            "requestTimeMils": 0
        }
        
        r = self.session.post(URL, json=Payload, timeout=2)

        encryptedKey = r.json()["result"]["key"]
        self.key_and_iv = self.rsa_decrypt(encryptedKey)

        self.cookie = r.headers["Set-Cookie"][:-13]

        self.session.close()
        return self.key_and_iv, self.cookie

    def get_random_key_and_cookie(self):
        return os.urandom(32), "TP_SESSIONID=FACDD9C3E823F1246954ED57A1676B66"
