#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from commons.properties import *

import pyshark
import json

if(len(sys.argv) < 3):
    print("Usage: python3 print_commands.py [device_type] [TCP|UDP|TCP_UDP] ")
    exit(1)

TapoDevice = instantiate_class_from_text(sys.argv[1])

device_tapo_traffic = lambda packet :(
        packet.ip.dst == "255.255.255.255" or
        (packet.ip.src == TapoApp.ip and packet.ip.dst == TapoDevice.ip) or
        (packet.ip.src == TapoDevice.ip and packet.ip.dst == TapoApp.ip)
    )

def get_payload(udp):
    hex_values = udp.payload.replace(":", "").split()
    return bytes.fromhex("".join(hex_values))

def udp_prettyprint(data):
    print(f"{data[:4]} L={data[4:6]} {data[6:8]} N={data[8:12]} C={data[12:16]}")
    json_data = json.loads(data[16:].decode())
    print(json.dumps(json_data, indent=2))
    print("")

def packet_callback(packet):
    if device_tapo_traffic(packet) and "UDP" in packet:
        udp_prettyprint(get_payload(packet.udp))
        print(get_payload(packet.udp))
    
    if device_tapo_traffic(packet) and "TCP" in packet and hasattr(packet.tcp, 'payload'):
        print("")
        print(get_payload(packet.tcp))
        print("")

if __name__ == "__main__":
    filterType = sys.argv[2]

    if(filterType == 'TCP'):
        display_filter = "(ip and tcp)"
    elif(filterType == 'UDP'):
        display_filter = "(ip and udp)"
    elif(filterType == 'TCP_UDP'):
        display_filter = "(ip and (udp or tcp))"
    else:
        print("Display filter", filterType, "not found, exit...")
        exit(1)

    print("Starting Sniffing...")
    print(TapoDevice.ip, TapoApp.ip)
    capture = pyshark.LiveCapture(interface=Evil.wireless_interface_name, display_filter=display_filter)
    try:
        capture.apply_on_packets(packet_callback)
    except KeyboardInterrupt:
        print("\nQuitting...")
